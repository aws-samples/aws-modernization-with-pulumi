<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Module 02: Lambda &amp; API Gateway on Modern Infrastructure as Code with Pulumi</title>
    <link>//localhost:1313/en/40_lambda_microservices_ts/30_simple_api_gateway.html</link>
    <description>Recent content in Module 02: Lambda &amp; API Gateway on Modern Infrastructure as Code with Pulumi</description>
    <generator>Hugo</generator>
    <language>en-US</language>
    <atom:link href="//localhost:1313/en/40_lambda_microservices_ts/30_simple_api_gateway/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>2.1 Creating a New Project</title>
      <link>//localhost:1313/en/40_lambda_microservices_ts/30_simple_api_gateway/1_new_project.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/en/40_lambda_microservices_ts/30_simple_api_gateway/1_new_project.html</guid>
      <description>Infrastructure in Pulumi is organized into projects. Each project is a single program that, when run, declares the desired infrastructure for Pulumi to manage.&#xA;Step 1 — Create a Directory Each Pulumi project lives in its own directory. Create one now and change into it:&#xA;mkdir lambda-api-gateway cd lambda-api-gateway Pulumi will use the directory name as your project name by default. To create an independent project, simply name the directory differently.</description>
    </item>
    <item>
      <title>2.2 Configuring AWS</title>
      <link>//localhost:1313/en/40_lambda_microservices_ts/30_simple_api_gateway/10_configuring_aws.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/en/40_lambda_microservices_ts/30_simple_api_gateway/10_configuring_aws.html</guid>
      <description>Now that you have a basic project, let&amp;rsquo;s configure AWS support for it.&#xA;Step 1 — Install the AWS Packages Run the following command to install the AWS package:&#xA;npm install @pulumi/aws npm install @pulumi/awsx The package will be added to node_modules, package.json, and package-lock.json.&#xA;Step 2 — Import the AWS Package Now that the AWS packages are installed, we need to import it as part of our project:&#xA;import * as aws from &amp;#34;@pulumi/aws&amp;#34;; import * as awsx from &amp;#34;@pulumi/awsx&amp;#34;; The index.</description>
    </item>
    <item>
      <title>2.3 API Gateway</title>
      <link>//localhost:1313/en/40_lambda_microservices_ts/30_simple_api_gateway/20_api_gateway_get.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/en/40_lambda_microservices_ts/30_simple_api_gateway/20_api_gateway_get.html</guid>
      <description>Now that you have a project configured to use AWS, you&amp;rsquo;ll create some basic infrastructure in it. Let&amp;rsquo;s use AWS crosswalk to define a lambda function.&#xA;Step 1 — Declare a New Lambda Function Add the following to your index.ts file:&#xA;const api = new awsx.apigateway.API(&amp;#34;hello-world&amp;#34;, { routes: [{ path: &amp;#34;/&amp;#34;, method: &amp;#34;GET&amp;#34;, eventHandler: async (event) =&amp;gt; { return { statusCode: 200, body: &amp;#34;Hello, world!&amp;#34;, }; }, }], }) The index.</description>
    </item>
    <item>
      <title>2.4 Processing Input Data</title>
      <link>//localhost:1313/en/40_lambda_microservices_ts/30_simple_api_gateway/30_processing_data.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/en/40_lambda_microservices_ts/30_simple_api_gateway/30_processing_data.html</guid>
      <description>We just saw how Pulumi Crosswalk allows you to quickly define serverless API endpoints and created a simple get request.&#xA;Now, let&amp;rsquo;s take things a little further.&#xA;Step 1 — Add a new API Gateway Route Create a new route in your API Gateway that accepts post requests. We&amp;rsquo;ll add this to our already created API Gateway in the routes: [] block. The route should like this this:&#xA;{ path: &amp;#34;encode&amp;#34;, method: &amp;#34;POST&amp;#34;, eventHandler: async (event) =&amp;gt; { console.</description>
    </item>
  </channel>
</rss>

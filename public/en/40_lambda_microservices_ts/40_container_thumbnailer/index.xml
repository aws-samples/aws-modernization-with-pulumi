<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Module 03: Containers &amp; Microservices on Modern Infrastructure as Code with Pulumi</title>
    <link>//localhost:1313/en/40_lambda_microservices_ts/40_container_thumbnailer.html</link>
    <description>Recent content in Module 03: Containers &amp; Microservices on Modern Infrastructure as Code with Pulumi</description>
    <generator>Hugo</generator>
    <language>en-US</language>
    <atom:link href="//localhost:1313/en/40_lambda_microservices_ts/40_container_thumbnailer/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>3.1 Creating a New Project</title>
      <link>//localhost:1313/en/40_lambda_microservices_ts/40_container_thumbnailer/1_new_project.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/en/40_lambda_microservices_ts/40_container_thumbnailer/1_new_project.html</guid>
      <description>Infrastructure in Pulumi is organized into projects. Each project is a single program that, when run, declares the desired infrastructure for Pulumi to manage.&#xA;Step 1 — Create a Directory Each Pulumi project lives in its own directory. Create one now and change into it:&#xA;mkdir lambda-thumbnailer cd lambda-thumbnailer Pulumi will use the directory name as your project name by default. To create an independent project, simply name the directory differently.</description>
    </item>
    <item>
      <title>3.2 Configuring AWS</title>
      <link>//localhost:1313/en/40_lambda_microservices_ts/40_container_thumbnailer/10_configuring_aws.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/en/40_lambda_microservices_ts/40_container_thumbnailer/10_configuring_aws.html</guid>
      <description>Now that you have a basic project, let&amp;rsquo;s configure AWS support for it.&#xA;Step 1 — Install the AWS Package Run the following command to install the AWS packages:&#xA;npm install @pulumi/aws npm install @pulumi/awsx The package will be added to node_modules, package.json, and package-lock.json.&#xA;Step 2 — Import the AWS Package Now that the AWS package is installed, we need to import it as part of our project:&#xA;import * as aws from &amp;#34;@pulumi/aws&amp;#34;; import * as awsx from &amp;#34;@pulumi/awsx&amp;#34;; The index.</description>
    </item>
    <item>
      <title>3.3 Thumbnailer Container</title>
      <link>//localhost:1313/en/40_lambda_microservices_ts/40_container_thumbnailer/20_create_thumbnailer.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/en/40_lambda_microservices_ts/40_container_thumbnailer/20_create_thumbnailer.html</guid>
      <description>Now that you have a project configured to use AWS, we can create the thumbnailer. We&amp;rsquo;ll use the AWS Lambda Containers for this.&#xA;Step 1 — Create a Docker Image Create a new directory within your Pulumi project called app&#xA;mkdir app Next, create a Dockerfile within the app directory and use it to build ffmpeg into the image:&#xA;FROM amazon/aws-lambda-nodejs:12 ARG FUNCTION_DIR=&amp;#34;/var/task&amp;#34; # Install tar and xz RUN yum install tar xz unzip -y # Install awscli RUN curl &amp;#34;https://awscli.</description>
    </item>
    <item>
      <title>3.4 Define Lambda Container Function</title>
      <link>//localhost:1313/en/40_lambda_microservices_ts/40_container_thumbnailer/30_aws_infra.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/en/40_lambda_microservices_ts/40_container_thumbnailer/30_aws_infra.html</guid>
      <description>In the previous step, we built and pushed a Lambda container to an ECR repository. Now let&amp;rsquo;s define a lambda function whichs runs this container&#xA;Step 1 — Declare an S3 Bucket and IAM Role Add the following to your index.ts file:&#xA;// A bucket to store videos and thumbnails. const bucket = new aws.s3.Bucket(&amp;#34;thumbnailer&amp;#34;,{ forceDestroy: true, }); const role = new aws.iam.Role(&amp;#34;thumbnailerRole&amp;#34;, { assumeRolePolicy: aws.iam.assumeRolePolicyForPrincipal({ Service: &amp;#34;lambda.amazonaws.com&amp;#34; }), }); const lambdaFullAccess = new aws.</description>
    </item>
    <item>
      <title>3.5 Make a thumbnail website</title>
      <link>//localhost:1313/en/40_lambda_microservices_ts/40_container_thumbnailer/40_s3_website.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/en/40_lambda_microservices_ts/40_container_thumbnailer/40_s3_website.html</guid>
      <description>The final step is to make a website to display our images. We can use S3&amp;rsquo;s static content host for this.&#xA;Step 1 — Add a bucket policy Add the following to your index.ts file:&#xA;const bucketPolicy = new aws.s3.BucketPolicy(&amp;#34;thumbnailer&amp;#34;, { bucket: bucket.id, policy: bucket.arn.apply(arn =&amp;gt; JSON.stringify({ &amp;#34;Version&amp;#34;: &amp;#34;2012-10-17&amp;#34;, &amp;#34;Statement&amp;#34;: [{ &amp;#34;Effect&amp;#34;: &amp;#34;Allow&amp;#34;, &amp;#34;Principal&amp;#34;: &amp;#34;*&amp;#34;, &amp;#34;Action&amp;#34;: [ &amp;#34;s3:*&amp;#34; ], &amp;#34;Resource&amp;#34;: [ `${arn}/*`, `${arn}` ] }] })) }) The index.ts file should now have the following contents:</description>
    </item>
  </channel>
</rss>

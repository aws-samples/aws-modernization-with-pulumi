<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Module 03: Docker &amp; Amazon ECS on AWS Fargate on Modern Infrastructure as Code with Pulumi</title>
    <link>//localhost:1313/en/25_intro_modern_iac_python/40_ecs.html</link>
    <description>Recent content in Module 03: Docker &amp; Amazon ECS on AWS Fargate on Modern Infrastructure as Code with Pulumi</description>
    <generator>Hugo</generator>
    <language>en-US</language>
    <atom:link href="//localhost:1313/en/25_intro_modern_iac_python/40_ecs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>3.1 Creating a New Project</title>
      <link>//localhost:1313/en/25_intro_modern_iac_python/40_ecs/1_new_project.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/en/25_intro_modern_iac_python/40_ecs/1_new_project.html</guid>
      <description>Infrastructure in Pulumi is organized into projects. Each project is a single program that, when run, declares the desired infrastructure for Pulumi to manage.&#xA;Step 1 — Create a Directory Each Pulumi project lives in its own directory. Create one now and change into it:&#xA;mkdir iac-workshop-ecs cd iac-workshop-ecs Pulumi will use the directory name as your project name by default. To create an independent project, simply name the directory differently.</description>
    </item>
    <item>
      <title>3.2 Installing and Configuring the AWS and AWSX Providers</title>
      <link>//localhost:1313/en/25_intro_modern_iac_python/40_ecs/10_configuring_aws.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/en/25_intro_modern_iac_python/40_ecs/10_configuring_aws.html</guid>
      <description>Now that we have our project boilerplate, we will add 2 Pulumi providers:&#xA;AWS Classic, which gives us all the fundamental AWS resources, like VPC subnets. AWSx, which contains higher level Pulumi components, like a full, production-ready VPC that includes subnets, NAT gateways, routing tables, and so on. Step 1 — Install the AWS and AWSx Packages Pulumi created a virtualenv for us when we created our iac-workshop-ecs project. We&amp;rsquo;ll need to activate it to install dependencies:</description>
    </item>
    <item>
      <title>3.3 Create a VPC, ECS Cluster, &amp; Load Balancer</title>
      <link>//localhost:1313/en/25_intro_modern_iac_python/40_ecs/20_create_cluster.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/en/25_intro_modern_iac_python/40_ecs/20_create_cluster.html</guid>
      <description>Step 1 — Create a VPC First, we&amp;rsquo;ll create a VPC to host our ECS cluster. We&amp;rsquo;ll use the AWSx provider to do this. The AWSx provider contains higher-level constructs called component resources that allow us to create production-ready infrastructure without needing to declare every individual resource.&#xA;Add the following to your __main__.py:&#xA;vpc = awsx.ec2.Vpc(&amp;#34;my-vpc&amp;#34;) &amp;#x2705; After this change, your __main__.py should look like this:&#xA;import pulumi as pulumi import pulumi_aws as aws import pulumi_awsx as awsx vpc = awsx.</description>
    </item>
    <item>
      <title>3.4 Deploy a Fargate Service</title>
      <link>//localhost:1313/en/25_intro_modern_iac_python/40_ecs/30_deploy_service.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/en/25_intro_modern_iac_python/40_ecs/30_deploy_service.html</guid>
      <description>In order to create a Fargate service, we need to add an IAM Role and a Task Definition and Service. the ECS Cluster will run the nginx image from Docker Hub.&#xA;Step 1 — Create an ECS Task Execution Role First, we need to add a new import at the top of our file. We&amp;rsquo;ll use this when defining our ECS task&amp;rsquo;s execution role.&#xA;Add the following to the top of your __main__.</description>
    </item>
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Module 03: Docker &amp; Amazon ECS on AWS Fargate on Modern Infrastructure as Code with Pulumi</title>
    <link>//localhost:1313/en/20_intro_modern_iac_ts/40_ecs.html</link>
    <description>Recent content in Module 03: Docker &amp; Amazon ECS on AWS Fargate on Modern Infrastructure as Code with Pulumi</description>
    <generator>Hugo</generator>
    <language>en-US</language>
    <atom:link href="//localhost:1313/en/20_intro_modern_iac_ts/40_ecs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>3.1 Creating a New Project</title>
      <link>//localhost:1313/en/20_intro_modern_iac_ts/40_ecs/1_new_project.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/en/20_intro_modern_iac_ts/40_ecs/1_new_project.html</guid>
      <description>Infrastructure in Pulumi is organized into projects. Each project is a single program that, when run, declares the desired infrastructure for Pulumi to manage.&#xA;Step 1 — Create a Directory Each Pulumi project lives in its own directory. Create one now and change into it:&#xA;mkdir iac-workshop-ecs cd iac-workshop-ecs Pulumi will use the directory name as your project name by default. You can change this during the project initiation process, but we&amp;rsquo;ll stick with the default for now.</description>
    </item>
    <item>
      <title>3.2 Installing and Configuring the AWS and AWSX Providers</title>
      <link>//localhost:1313/en/20_intro_modern_iac_ts/40_ecs/10_configuring_aws.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/en/20_intro_modern_iac_ts/40_ecs/10_configuring_aws.html</guid>
      <description>Now that we have our project boilerplate, we will add 2 Pulumi providers:&#xA;AWS Classic, which gives us all the fundamental AWS resources, like VPC subnets. AWSx, which contains higher level Pulumi components, like a full, production-ready VPC that includes subnets, NAT gateways, routing tables, and so on. Step 1 — Install the AWS and AWSx Packages Run the following commands to install the AWS Classic and AWSX packages:&#xA;npm i @pulumi/aws @pulumi/awsx Step 2 — Import the AWS Package Now that our packages are installed, we need to import them as part of our project.</description>
    </item>
    <item>
      <title>3.3 Create a VPC, ECS Cluster, &amp; Load Balancer</title>
      <link>//localhost:1313/en/20_intro_modern_iac_ts/40_ecs/20_create_cluster.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/en/20_intro_modern_iac_ts/40_ecs/20_create_cluster.html</guid>
      <description>Step 1 — Create a VPC and ECS Cluster First, we&amp;rsquo;ll create a VPC to host our ECS cluster. We&amp;rsquo;ll use the AWSx provider to do this. The AWSx provider contains higher-level constructs called component resources that allow us to create production-ready infrastructure without needing to declare every individual resource. We&amp;rsquo;ll also declare our ECS cluster.&#xA;Add the following to your index.ts:&#xA;const vpc = new awsx.ec2.Vpc(&amp;#34;vpc&amp;#34;, { natGateways: { strategy: awsx.</description>
    </item>
    <item>
      <title>3.4 Deploy a Fargate Service</title>
      <link>//localhost:1313/en/20_intro_modern_iac_ts/40_ecs/30_deploy_service.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/en/20_intro_modern_iac_ts/40_ecs/30_deploy_service.html</guid>
      <description>In order to create a Fargate service, we need to add an IAM Role and a Task Definition and Service. the ECS Cluster will run the nginx image from Docker Hub.&#xA;Step 1 — Create an ECS Task Execution Role Now let&amp;rsquo;s define our IAM execution role and attach a policy. Add the following to your index.ts:&#xA;const role = new aws.iam.Role(&amp;#34;task-exec-role&amp;#34;, { assumeRolePolicy: JSON.stringify({ Version: &amp;#34;2008-10-17&amp;#34;, Statement: [{ Action: &amp;#34;sts:AssumeRole&amp;#34;, Principal: { Service: &amp;#34;ecs-tasks.</description>
    </item>
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>GitOps for Socks Shop on Modern Infrastructure as Code with Pulumi</title>
    <link>//localhost:1313/en/additional-content/160_gitops_for_socks_shop.html</link>
    <description>Recent content in GitOps for Socks Shop on Modern Infrastructure as Code with Pulumi</description>
    <generator>Hugo</generator>
    <language>en-US</language>
    <atom:link href="//localhost:1313/en/additional-content/160_gitops_for_socks_shop/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Creating a New Project</title>
      <link>//localhost:1313/en/additional-content/160_gitops_for_socks_shop/1_new_project.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/en/additional-content/160_gitops_for_socks_shop/1_new_project.html</guid>
      <description>Step 1 — Create a Directory Each Pulumi project lives in its own directory. Create one now and change into it:&#xA;mkdir socks-shop cd socks-shop Pulumi will use the directory name as your project name by default. To create an independent project, simply name the directory differently.&#xA;Step 2 — Initialize Your Project A Pulumi project is just a directory with some files in it. It&amp;rsquo;s possible for you to create a new one by hand.</description>
    </item>
    <item>
      <title>Use an Existing Kubernetes Cluster</title>
      <link>//localhost:1313/en/additional-content/160_gitops_for_socks_shop/10_use_an_existing_cluster.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/en/additional-content/160_gitops_for_socks_shop/10_use_an_existing_cluster.html</guid>
      <description>Configure the use of a StackReference to the Kubernetes cluster stack to extract and use the kubeconfig. This can be found in the previous lab.&#xA;Let&amp;rsquo;s start by adding these imports to your index.ts file:&#xA;import * as k8s from &amp;#34;@pulumi/kubernetes&amp;#34;; Create a StackReference to the Kubernetes cluster stack using the config clusterStackRef stack setting.&#xA;const pulumiConfig = new pulumi.Config(); // Existing Pulumi stack reference in the format: // &amp;lt;organization&amp;gt;/&amp;lt;project&amp;gt;/&amp;lt;stack&amp;gt; e.</description>
    </item>
    <item>
      <title>Creating a Namespace</title>
      <link>//localhost:1313/en/additional-content/160_gitops_for_socks_shop/20_create_a_namespace.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/en/additional-content/160_gitops_for_socks_shop/20_create_a_namespace.html</guid>
      <description>Next, declare a namespace object. This will allow scoping the deployment of the Sock Shop&amp;rsquo;s components to that namespace.&#xA;To do this, we need to create a stack reference to the project where we created the eks infrastructure so we can get the Kubeconfig and be able to build the correct kubernetes provider. We are going to make the stack reference name configurable:&#xA;import * as pulumi from &amp;#34;@pulumi/pulumi&amp;#34;; const pulumiConfig = new pulumi.</description>
    </item>
    <item>
      <title>Declare a Sock Shop Custom Resource</title>
      <link>//localhost:1313/en/additional-content/160_gitops_for_socks_shop/30_declare_sock_shop_resource.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/en/additional-content/160_gitops_for_socks_shop/30_declare_sock_shop_resource.html</guid>
      <description>Let&amp;rsquo;s look up the namespace in which ArgoCD has been deployed by using the StackReference registered before:&#xA;const argoCDNamespace = argoStackRef.getOutput(&amp;#34;argoNamespace&amp;#34;); Now, let&amp;rsquo;s register an Argo Application in the Kubernetes API using a CustomResource:&#xA;const sockshop = new k8s.apiextensions.CustomResource( &amp;#34;sock-shop&amp;#34;, { apiVersion: &amp;#34;argoproj.io/v1alpha1&amp;#34;, kind: &amp;#34;Application&amp;#34;, metadata: { namespace: argoCDNamespace, // the ns where argocd is deployed name: name, // name of app in ArgoCd }, spec: { destination: { namespace: ns.</description>
    </item>
    <item>
      <title>Deploying our Application Stack</title>
      <link>//localhost:1313/en/additional-content/160_gitops_for_socks_shop/40_deploy_our_application.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/en/additional-content/160_gitops_for_socks_shop/40_deploy_our_application.html</guid>
      <description>First, add the StackReferences to the cluster and argoCD stacks, which will be used to get the kubeconfig and argocd namespace from their stack outputs.&#xA;pulumi config set clusterStackRef workshops/eks-infrastructure/dev pulumi config set argoCDStackRef workshops/argocd/dev Now we can deploy Everything:&#xA;pulumi up This will show you a preview and, after selecting yes, the application will be deployed:&#xA;Updating (dev): Type Name Status + pulumi:pulumi:Stack socks-shop-dev created + ├─ pulumi:providers:kubernetes k8sProvider created + └─ kubernetes:core:Namespace sock-shop-ns created + └─ kubernetes:argoproj.</description>
    </item>
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Deploying Containers to ECS on Modern Infrastructure as Code with Pulumi</title>
    <link>//localhost:1313/en/additional-content/110_deploying_containers_to_ecs.html</link>
    <description>Recent content in Deploying Containers to ECS on Modern Infrastructure as Code with Pulumi</description>
    <generator>Hugo</generator>
    <language>en-US</language>
    <atom:link href="//localhost:1313/en/additional-content/110_deploying_containers_to_ecs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Creating a New Project</title>
      <link>//localhost:1313/en/additional-content/110_deploying_containers_to_ecs/1_new_project.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/en/additional-content/110_deploying_containers_to_ecs/1_new_project.html</guid>
      <description>Step 1 — Create a Directory Each Pulumi project lives in its own directory. Create one now and change into it:&#xA;mkdir ecs-workshop cd ecs-workshop Pulumi will use the directory name as your project name by default. To create an independent project, simply name the directory differently.&#xA;Step 2 — Initialize Your Project A Pulumi project is just a directory with some files in it. It&amp;rsquo;s possible for you to create a new one by hand.</description>
    </item>
    <item>
      <title>Creating an AWS ECS Cluster</title>
      <link>//localhost:1313/en/additional-content/110_deploying_containers_to_ecs/10_creating_an_ecs_cluster.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/en/additional-content/110_deploying_containers_to_ecs/10_creating_an_ecs_cluster.html</guid>
      <description>Install the AWSX package, if you haven&amp;rsquo;t already:&#xA;npm install @pulumi/awsx Import the AWSX and Pulumi packages in an empty index.ts file:&#xA;import * as awsx from &amp;#34;@pulumi/awsx&amp;#34;; import * as pulumi from &amp;#34;@pulumi/pulumi&amp;#34;; And now create a new ECS cluster. You will use the default values, so doing so is very concise:&#xA;const cluster = new awsx.ecs.Cluster(&amp;#34;cluster&amp;#34;); The index.ts file should now have the following contents:&#xA;import * as pulumi from &amp;#34;@pulumi/pulumi&amp;#34;; import * as awsx from &amp;#34;@pulumi/awsx&amp;#34;; const cluster = new awsx.</description>
    </item>
    <item>
      <title>Creating an ECS Loadbalanced Service</title>
      <link>//localhost:1313/en/additional-content/110_deploying_containers_to_ecs/20_creating_a_loadbalanced_service.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/en/additional-content/110_deploying_containers_to_ecs/20_creating_a_loadbalanced_service.html</guid>
      <description>Next, allocate the application load balancer (ALB) and listen for HTTP traffic port 80. Make sure to pass along the ECS cluster&amp;rsquo;s security groups:&#xA;const alb = new awsx.elasticloadbalancingv2.ApplicationLoadBalancer( &amp;#34;app-lb&amp;#34;, { external: true, securityGroups: cluster.securityGroups }); const atg = alb.createTargetGroup( &amp;#34;app-tg&amp;#34;, { port: 80, deregistrationDelay: 0 }); const web = atg.createListener(&amp;#34;web&amp;#34;, { port: 80 }); Now declare the ECS service that will use &amp;ldquo;Fargate,&amp;rdquo; meaning you don&amp;rsquo;t need to manage the servers behind your ECS cluster.</description>
    </item>
    <item>
      <title>Build and Publish A Custom Container</title>
      <link>//localhost:1313/en/additional-content/110_deploying_containers_to_ecs/30_build_and_publish_custom_container.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/en/additional-content/110_deploying_containers_to_ecs/30_build_and_publish_custom_container.html</guid>
      <description>Add a few new files. First, create a site directory structure:&#xA;mkdir -p app/site Then create a index.html file in app/site:&#xA;&amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt; &amp;lt;title&amp;gt;Hello, Pulumi!&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;p&amp;gt;Hello, containers!&amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;Made with ❤️ with &amp;lt;a href=&amp;#34;https://pulumi.com&amp;#34;&amp;gt;Pulumi&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; And next, app/Dockerfile:&#xA;FROM nginx COPY site /usr/share/nginx/html Now, you will change the image from &amp;quot;nginx&amp;quot; to a custom build of a local Dockerfile published to a private ECR registry. Add a build step right before the Fargate service definition:</description>
    </item>
    <item>
      <title>Destroying Your Infrastructure</title>
      <link>//localhost:1313/en/additional-content/110_deploying_containers_to_ecs/40_destroying_your_infrastructure.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/en/additional-content/110_deploying_containers_to_ecs/40_destroying_your_infrastructure.html</guid>
      <description>Finally, destroy the resources and the stack itself to ensure no unnecessary costs occur:&#xA;pulumi destroy pulumi stack rm </description>
    </item>
  </channel>
</rss>

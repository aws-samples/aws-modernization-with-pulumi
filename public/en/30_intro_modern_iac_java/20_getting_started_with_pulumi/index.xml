<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Module 01: S3 Website on Modern Infrastructure as Code with Pulumi</title>
    <link>//localhost:1313/en/30_intro_modern_iac_java/20_getting_started_with_pulumi.html</link>
    <description>Recent content in Module 01: S3 Website on Modern Infrastructure as Code with Pulumi</description>
    <generator>Hugo</generator>
    <language>en-US</language>
    <atom:link href="//localhost:1313/en/30_intro_modern_iac_java/20_getting_started_with_pulumi/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>1.1 Creating a New Project</title>
      <link>//localhost:1313/en/30_intro_modern_iac_java/20_getting_started_with_pulumi/1_new_project.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/en/30_intro_modern_iac_java/20_getting_started_with_pulumi/1_new_project.html</guid>
      <description>Infrastructure in Pulumi is organized into projects. Each project is a single program that, when run, declares the desired infrastructure for Pulumi to manage.&#xA;Step 1 — Create a Directory Each Pulumi project lives in its own directory. Create one now and change into it:&#xA;mkdir iac-workshop cd iac-workshop Pulumi will use the directory name as your project name by default. To create an independent project, simply name the directory differently.</description>
    </item>
    <item>
      <title>1.2 Configuring AWS</title>
      <link>//localhost:1313/en/30_intro_modern_iac_java/20_getting_started_with_pulumi/10_configuring_aws.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/en/30_intro_modern_iac_java/20_getting_started_with_pulumi/10_configuring_aws.html</guid>
      <description>Current module of the workshop is updated to use AWS Native and AWS Classic providers side-by-side. AWS Native is in public preview. AWS Native provides coverage of all resources in the AWS Cloud Control API, including same-day access to all new AWS resources. However, some AWS resources are not yet available in AWS Native.&#xA;Now that you have a basic project, let&amp;rsquo;s configure AWS support for it.&#xA;Step 1 — Add AWS dependencies Before we can use AWS Native and AWS Classic providers, we need to update our project with appropriate dependencies.</description>
    </item>
    <item>
      <title>1.3 Provisioning Infrastructure</title>
      <link>//localhost:1313/en/30_intro_modern_iac_java/20_getting_started_with_pulumi/20_provisioning_infrastructure.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/en/30_intro_modern_iac_java/20_getting_started_with_pulumi/20_provisioning_infrastructure.html</guid>
      <description>Now that you have a project configured to use AWS, you&amp;rsquo;ll create some basic infrastructure in it. We will start with a simple S3 bucket.&#xA;Step 1 — Declare a New Bucket Update the imports in the App.java file as follows:&#xA;// ... import com.pulumi.Pulumi; import com.pulumi.aws.s3.Bucket; import com.pulumi.aws.s3.BucketArgs; import com.pulumi.aws.s3.inputs.BucketWebsiteArgs; Add the following code to your main method in the App class in the App.java file:&#xA;// ... var bucket = new Bucket(&amp;#34;my-website-bucket&amp;#34;, BucketArgs.</description>
    </item>
    <item>
      <title>1.4 Updating Infrastructure</title>
      <link>//localhost:1313/en/30_intro_modern_iac_java/20_getting_started_with_pulumi/30_updating_infrastructure.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/en/30_intro_modern_iac_java/20_getting_started_with_pulumi/30_updating_infrastructure.html</guid>
      <description>We just saw how to create new infrastructure from scratch. Next, let&amp;rsquo;s make a few updates:&#xA;Add an object to your bucket. Serve content from your bucket as a website. Programmatically create infrastructure. This demonstrates how declarative infrastrucutre as code tools can be used not just for initial provisioning, but also subsequent changes to existing resources.&#xA;Step 1 — Add an Object to Your Bucket Create a directory src/main/resources/www and add a new index.</description>
    </item>
  </channel>
</rss>
